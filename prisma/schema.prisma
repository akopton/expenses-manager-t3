// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider          = "postgresql"
    url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
    shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    bills         Bill[]
    categories    Category[]
    billSets      BillSet[]
    product       Product[]
    billItem      BillItem[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Product {
    id       String     @id @default(cuid())
    name     String
    value    Float
    count    Int        @default(1)
    BillItem BillItem[]
    owner    User       @relation(fields: [userId], references: [id])
    userId   String

    @@unique([name, userId])
}

model BillItem {
    id        String  @id @default(cuid())
    name      String
    billId    String
    productId String
    product   Product @relation(fields: [productId], references: [id])
    value     Float // Custom value for the product in the bill
    count     Int
    bill      Bill    @relation(fields: [billId], references: [id])
    owner     User    @relation(fields: [userId], references: [id])
    userId    String
}

model Bill {
    id          String     @id @default(cuid())
    userId      String
    name        String
    items       BillItem[]
    value       Float
    added_at    DateTime
    updated_at  DateTime
    paymentDate DateTime
    isPaid      Boolean
    paid_at     DateTime?
    categoryId  String
    category    Category   @relation(fields: [categoryId], references: [id])
    billSetId   String?
    billSet     BillSet?   @relation(fields: [billSetId], references: [id])
    owner       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
    id         String    @id @default(cuid())
    name       String
    value      Float     @default(0)
    updated_at DateTime?
    bills      Bill[]
    owner      User      @relation(fields: [userId], references: [id])
    userId     String

    @@unique([name, userId])
}

model BillSet {
    id          String    @id @default(cuid())
    name        String
    value       Float
    added_at    DateTime  @default(now())
    updated_at  DateTime?
    createdById String
    updatedById String?
    // lastAddedBillId String 
    bills       Bill[]
    owners      User[]
}
